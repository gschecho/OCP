Comandos Java
javac - Compilador de Java
java - Lanzador del programa
jar - Se utiliza para empaquetar multiples archivos en un archivo java (Java ARchive)
javadoc - Se utiliza para crear documentación.


------

Garbage Collector - System.gc()
NO garantiza que el garbage collector pase.
El garbage collector sale cada vez que una variable se queda sin referencia.
No se puede canderizar, programar que pase en un cierto momento.

-------
& --> Evalua todo
&& (short circuit)  --> Ecalua hasta que encuentra un false. Ahi deja de evaluar lo que sigue.
-------
En las operaciones compuestas hay un cast implicito
+=, -= , /= , %=, *=


-------
Bloques:
inicializador
{} -> se ejecuta solo si se crea una instancia de la clase
void nombre{} --> se ejecuta solo si se crea una instancia de la clase
static{} --> se ejecuta siempre una vez
constructor clase(){} --> se ejecuta al hacer la instancia
main{}

Los static pertenecen a la clase y solo de jecutan 1 sola vez.
Orden de ejecución:
Bloques estáticos
Bloques Anónimos
Constructor

Las variables siguen el mismo orden de ejecución.
variables estáticas


----
Concatenación cadena nuevo java 13+
"""
Bloque de texto
Lo que sea que queramos.

"""
En lugar de concatenar con + y \n


----
keyword var

var se puede utilizar en métodos y se han de inicializar para que pueda inferir el tipo de dato.

----
Defaults
float y numeros = 0
char u000
String null
Todos los Objetos serán null como default.
Las variables de clase nunca son nulls.
Las variables locales no tienen default. Dentro de método, bloques inicialización, etc.


----
Uso de _
Ouede haber mas de un _ seguido ____ .
Es como una coma.
No pude ir ni al principio, ni al final.
tampoco puede ir antes o depues de un punto.


-----

El octal empieza en 0
El hexadecimal empieza en 0x
El binario empieza en 0b o 0B

cualquien int que empieze con los diferentes identificadores.

int = 1 +  int = 010   esto da 9 ya que uno es decimal y el otro es octal.

------
Los imports de forma explicita tienen preferencia sobre los llamados mediante *
import paquete.ClaseeEspecifica
import paquete.*

------
Los primitivos no tienen metodos ni propiedades.
int, short, etc.
Solo los objetos y empaquetadores tienen metodos
String.length()


-------
La suma de bytes, shorts, charts siempre devuelven un int

-------
(alt +126)
~ --> invierte los 0 de un número en bites // (-1 * valor ) -1

------

for
no se puede definir 2 veces el int for(int x= 0, int j =1;  )
------

No se puede usar break y continue en un ternario

--------
else if(x indtanceof Integer)
esle{sout("Lo que sea")}
else puede tener una comparación como el else if.
no se puede utilizar el keyword default

-------
PatternMatching introducido java 16
La variable asignada al pattern no se puede instanciar 2 veces con el mismo nombre
if(a instanceof b)
else if(a instanceof b)

-----
switch
el default puede ir en cualquier lado, pero si no tiene break se ejecutara todo lo siguiente.
pueden lanzar excepciones.

-----
length ---> En los arrays es un atributo
length() ---> En String es como metodo.

STRING

No se le puede pasar un int a un string, si queremos hacerlo debemos concatenar un "" para convertirlo.
El casteo no funciona. (String)(1)
equals("") mira el contenido.
== mira que apunten a la misma variable de referencia.
intern significa que esta dentro del pool de strings // intern() mete al objeto en el pool de strings

indent(cantidad ) --> Agrega la cantidad identada delante de cada línea y añade un enter al final.
.translateEscapes() --> Elimina los scapes \ .

.substring(1,2) ---> da un caracter.
.substring(2,2) ---> No devuelve nada.
.substring(6,1) ---> Lanza una excepcion.
El segundo numero llega hasta 1 más del length del array.





StringBuilder() -> es mutable no hace falta asignar una variable de referencia.
append("texto") --> agrega al final del string lo que le pongamos
insert(indicie , "texto") --> inserta el texto en el índice que le digamos


Si agregamos un .substring() a un StringBuilder convierte el resultado en un Sgring pero no lo agrega al pool de Strings,
habría que agregarlo a la variable de referencia.

StringBuilder. replace(indice 1, indice 2, "Valor") -> remplaza el contenido en el indicie que le marquemos o en la consecucion de indice que le digamos
string. replace(valor 1, valor 2,) --> valor que queremos cambira, valor que pondremos.

strip() --> elimina espacios de principio y final aceptamdo unicode
stripLeading() --> elimina los espacios en el incio
stripTrailing() --> elimina los espacios del final
trim()



---------------
ARRAY
es mutable
es fija en numero
.equals() en dos arrays identicos nos dice que es false que sean iguales. El array no sobrescribe equals, toma el comportamiento de Object.
.compare(arr1, arr2) --> Negativo si el primero es más peq que el segundo, un cero si son iguales y positivo si es el primero más grande que el segundo. Si hay un elemento que difiere dentro del array si es mas largo en el primer array tira un numero positivo, si es mas pequeño tira un negativo.
.mismatch(arr1, arr2) --> 

con sort() --> Primero los números, lugo mayúsculas y por último minúsculas.
binarySearch() --> Para utilizar el binarySearch primero el array debe ordenarse, sino da 0. Si no se existe en el array utiliza el supuesto indice en el que estaría en negativo y  se resta 1.









MATH
min() -> devuelve un int si se le pasa un int, double, long,
round() --> devuelve un long o double
floor() --> devuelve un double
ceil() --> devuelve double
pow() --> devuelve un double
random()--> devuelve double


DATE
Los objetos de la API java.time son inmutables.
Instant necesita que conozcamos la zona horaria antes de utilizarlo. Si no es Instant.now();


Api java.time
Es inmutable, por lo que hay que reasignarlo cada vez que le pasemos un metodo.
var date = LocalDate.of(2022, Month.APRIL, 30)
date.plusDays(2) --> No lo guarda




-----------------------------------------------
HashCode  - equals

Siempre que se sobreescriba el metodo equals hay que sobreescribir el Hashcode
Devuelve un integer
Dentro del mismo programa el resultado de hashCode debe ser el mismo.
.equals devuelve true llamar a hashCode() debe regresar mismo resultado en ámbos
.equals devuelve false llamar a hashCode() podría regresar mismo resultado en ambos objetos.





PRINCIPIOS

Anierto/Cerrado - Clases abiertas para expansión pero cerradas para modificaciones.


